1. a. 	 50
	  20         60
  10         40         70
    15    30         62	     80
	   23	 35		   75

b. Inorder: 10, 15, 20, 23, 30, 35, 40, 50, 60, 62, 70, 75, 80
   Preorder: 50, 20, 10, 15, 40, 30, 23, 35, 60, 70, 62, 80, 75
   Postorder: 15, 10, 23, 35, 30, 40, 20, 62, 75, 80, 70, 60, 50

c.            50
	  15         60
  10         40         70
          23         62	     80
	   	 35		   75

2. 
a. 
struct Node {
	int value;
	Node* left;
	Node* right;
	Node* parent;
};

b. 
void insert(int value) {
	start with root node
	while not inserted
		if value equal to current node value 
			return
		if value less than current node value
			if its left pointer not null
				set current pointer to left pointer
			if its left pointer null
				create new node with value to left pointer
				set its parent pointer to current pointer
		else if value greater than current node value 
			if its right pointer not null
				set current pointer to right pointer
			if its right pointer null
				create new node with value to right pointer
				set its parent pointer to current pointer
		
}


3. 
a.        7
	5        6
    4   0    3   

b. 7, 5, 6, 4, 0, 3

c. 6, 5, 3, 4, 0


4. 
a. O(C + S)
b. O(logC + S)
c. O(logC + logS)
d. O(logS)
e. O(1)
f. O(logC + S)
g. O(SlogS)
h. O(ClogS)